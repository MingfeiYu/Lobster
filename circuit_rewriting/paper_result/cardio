cir to graph finished
old graph depth
---graph depth print---
var : m_0 depth : 10
var : m_1 depth : 9
var : m_2 depth : 8
var : m_3 depth : 7
---------------------
============================================= graph opt start ===================================================
initial graph size : 318
initial mult size : 109
whole case num : 612
reduced case num : 152
max case size : 38
min case size : 5
average case size : 12
median case size : 11
(and (and norm2 desty14) desty15) --> (and norm2 (and desty15 desty14))
(and (not (and n231 n223)) desty14) --> (xor (and (and desty14 n223) n231) desty14)
(not (and (and norm3 norm7) n379)) --> (not (and (and norm7 n379) norm3))
(and (and (and n301 n297) n290) n284) --> (and (and n284 n297) (and n301 n290))
(not (and (not (and n236 n222)) desty17)) --> (xor (not (and (and desty17 n222) n236)) desty17)
(and (and n481 (and n462 n457)) n476) --> (and (and (and n476 n457) n481) n462)
(and (and (and n440 n449) n1206) n444) --> (and (and (and n444 n440) n449) n1206)
(and (and (and n325 norm3) n322) i_25) --> (and (and norm3 (and i_25 n322)) n325)
(xor (and (and n554 n390) i_9) n618) --> (xor (and (and n390 i_9) n554) n618)
(and (xor (and n107 i_13) n118) n117) --> (xor (and (and n117 i_13) n107) (and n117 n118))
(and (not (and norm3 i_7)) (not i_4)) --> (xor (or (not norm3) (or (not i_7) i_4)) i_4)
(and (not (and (and n459 n457) n734)) pi020) --> (xor (and (and (and pi020 n459) n457) n734) pi020)
(and (and norm2 n893) (not (and n876 n824))) --> (and (xor (and (and n824 n893) n876) n893) norm2)
(and (not (and n481 (and n462 n457))) pi082) --> (xor (and (and (and pi082 n457) n481) n462) pi082)
(and (and n379 (not (xor n371 n373))) n376) --> (and (xor (not n371) n373) (and n376 n379))
(and (and n441 (xor norm3 (not n218))) n225) --> (and (xor (not norm3) n218) (and n225 n441))
(xor (and n107 (not (and n78 n63))) n125) --> (xor (xor (and (and n107 n63) n78) n125) n107)
(and n261 (not (xor n215 (and n177 i_23)))) --> (xor (and (and i_23 n261) n177) (and (not n215) n261))
(and n101 (not (and (and n85 n78) n74))) --> (xor (and (and n74 n85) (and n78 n101)) n101)
(and (and (not n94) (not norm4)) (not n63)) --> (not (or norm4 (or n63 n94)))
(and (not (and n104 (not (and n99 destx11)))) destx14) --> (or (and (and destx14 destx11) n99) (and (not n104) destx14))
(and (and (not (and n104 (not norm5))) destx14) destx15) --> (and (or norm5 (not n104)) (and destx15 destx14))
(and n261 (not (and (not (and n254 n220)) n219))) --> (and (xor (not (and (and n220 n219) n254)) n219) n261)
(and (xor (and (and desty17 n222) n236) desty17) n273) --> (xor (and (and (and n273 n222) desty17) n236) (and n273 desty17))
(and (and (and n731 n447) n445) (and n659 n440)) --> (and (and (and (and n447 n445) n440) n659) n731)
(and (and (and n440 n459) n658) (and n457 n458)) --> (and (and (and n458 n459) n457) (and n440 n658))
(and (and (and n461 n478) (and n457 n458)) n447) --> (and (and (and n447 n478) n458) (and n461 n457))
(and (and (and n480 n478) (and n462 n457)) n477) --> (and (and (and n478 n457) n477) (and n480 n462))
(and (and (and (and n437 n443) n440) n450) n436) --> (and (and (and (and n436 n437) n440) n443) n450)
(and (and (and (not opcode4) opcode3) (not opcode1)) opcode0) --> (and (not (or opcode4 opcode1)) (and opcode0 opcode3))
(xor (xor n610 n609) (and (and n547 n322) i_24)) --> (xor (xor (and (and i_24 n322) n547) n610) n609)
(and (xor norm2 (and (not n313) (not n273))) norm2) --> norm2
(and (not (xor i_15 (not i_7))) (and norm5 norm11)) --> (and (and norm11 (xor i_15 i_7)) norm5)
(and (xor (xor n286 (and n269 n213)) n249) n193) --> (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
(xor (and (and n93 n92) (not (and n125 destx25))) n92) --> (xor (and (and (and n93 destx25) n92) n125) (and (not n93) n92))
(and (xor (or (not (and n121 n116)) n114) n121) destx23) --> (xor (and (and (and destx23 n116) n121) (not n114)) (and (not n121) destx23))
(and (not (and n121 (not (and n116 (not n114))))) destx23) --> (and (xor (or (not (and n121 n116)) n114) n121) destx23)
(and (not (xor (and (and destx17 n95) norm5) destx17)) n94) --> (xor (and (and (and n94 n95) destx17) norm5) (and (not destx17) n94))
(and (and (and n169 n149) n142) (not (and n108 destx16))) --> (and (xor (and (and destx16 n149) n108) n149) (and n169 n142))
(xor (and (not (or n175 n153)) (and n19 n182)) n19) --> (xor (and (and (and n19 n182) (not n175)) (not n153)) n19)
(and (not (and (and n182 (not n175)) (not n153))) n19) --> (xor (and (not (or n175 n153)) (and n19 n182)) n19)
(and (not (and (not (and norm5 n468)) (not n1242))) n438) --> (or (and (and n438 n468) norm5) (and n438 n1242))
(and (not (and (and (and n476 n457) n481) n462)) pi082) --> (xor (and (and (and pi082 n476) n457) (and n481 n462)) pi082)
(and n1326 (not (xor (and (and pi082 n1285) n454) pi082))) --> (xor (and (and (and pi082 n1326) n1285) n454) (and (not pi082) n1326))
(and (not (and (and (and n444 n440) n449) n1206)) pi082) --> (xor (and (and (and (and pi082 n444) n440) n449) n1206) pi082)
(not (and (and (and (not norm5) n825) (not norm12)) n943)) --> (or (or (not (and n825 n943)) norm5) norm12)
(not (xor (and (or norm4 pi039) (xor pi026 pi027)) pi027)) --> (xor (or (or (xor (not pi027) pi026) pi039) norm4) pi026)
(and (not (and (and opcode3 (not opcode0)) opcode4)) (not opcode1)) --> (xor (or (not (and opcode3 opcode4)) (or opcode1 opcode0)) opcode1)
(and (not (and (not ctable0) ocoeffs3)) (not (and ctable0 ocoeffs1))) --> (xor (not (and (xor ocoeffs1 ocoeffs3) ctable0)) ocoeffs3)
(and (not (and (and (not n2287) (not n2285)) norm6)) n293) --> (xor (and (not (or n2285 n2287)) (and norm6 n293)) n293)
(and (and (and n379 (not (xor n371 n373))) n376) i_10) --> (and (and (xor (not n373) n371) (and i_10 n376)) n379)
(and (and (and n441 (xor norm4 (not n218))) n225) i_9) --> (and (and (xor (not norm4) n218) (and i_9 n225)) n441)
(and (not (xor (xor n286 (and n269 n213)) n249)) n184) --> (xor (and (xor (not n286) n249) n184) (and (and n184 n213) n269))
(and (not (and (not (and i_7 (not i_6))) norm6)) i_8) --> (xor (and (or (not i_7) i_6) (and norm6 i_8)) i_8)
(and (and (and (and (and n306 n263) n272) n277) n268) n305) --> (and (and (and (and n306 n305) (and n277 n263)) n272) n268)
(not (and (not norm3) (not (and (not (and n127 n93)) n92)))) --> (or (xor (and (and n93 n92) n127) n92) norm3)
(and (and (and (and (and n306 n305) n277) n272) n268) n263) --> (and (and (and (and (and n306 n263) n272) n277) n268) n305)
(not (and (xor (not (and (and n220 n219) n254)) n219) n261)) --> (xor (and (and (and n220 n261) n219) n254) (or (not n261) n219))
(not (and (xor (not (and (and n243 n248) n242)) n248) n252)) --> (xor (and (and (and n243 n248) n252) n242) (or (not n252) n248))
(and (and (and (and n306 n305) (and n277 n263)) n272) n268) --> (and (and (and (and n306 n277) n268) (and n263 n305)) n272)
(not (and (not (and (and n68 (not n64)) (not norm7))) n20)) --> (xor (or (or (not (and n20 n68)) n64) norm7) n20)
(not (and (xor (not (and (and n20 n285) n271)) n20) n296)) --> (xor (and (and (and n20 n296) n285) n271) (or (not n296) n20))
(not (and (xor (or (not (and n37 n267)) n254) n267) n46)) --> (xor (or (not (and (and n46 n37) n267)) n254) (and (not n267) n46))
(and (and (and (not pi044) (not pi042)) (not pi040)) (not pi038)) --> (not (or (or pi038 pi042) (or pi044 pi040)))
(not (and (xor (or (not (and n821 n1032)) n1028) n821) n1041)) --> (xor (or (not (and (and n821 n1032) n1041)) n1028) (and (not n821) n1041))
(not (and (xor (or (not (and n825 n1533)) n1529) n825) n1539)) --> (xor (or (not (and (and n825 n1539) n1533)) n1529) (and (not n825) n1539))
(and (not (xor (not (and (or pi058 pi116) pi026)) pi058)) pi094) --> (and (and (xor pi026 pi058) pi094) (or pi116 pi058))
(and (not (and n852 (and (and n848 n825) pi026))) (not n840)) --> (not (or (and (and (and n825 pi026) n852) n848) n840))
(not (and (not (and (and (not opcode4) (not opcode3)) opcode1)) opcode2)) --> (xor (or (not (and opcode2 opcode1)) (or opcode3 opcode4)) opcode2)
(not (or (and (xor ocoeffs1 ctable1) ingones1) (not (or ocoeffs1 ctable1)))) --> (xor (or (xor ctable1 ingones1) (xor ocoeffs1 ingones1)) ingones1)
(xor (xor (xor n690 n689) (and (and n627 n322) i_24)) n686) --> (xor (xor (xor (and (and i_24 n322) n627) n686) n689) n690)
(and (and (not (or n217 n168)) (and (not n120) n226)) i_32) --> (and (and (and i_32 n226) (not n168)) (not (or n217 n120)))
(not (and (and (not (and (and n135 n133) n129)) norm6) n47)) --> (or (not (and norm6 n47)) (and (and n135 n129) n133))
(and (not (and (and n135 (not n132)) (not n128))) (not n47)) --> (xor (or (or (not n135) n47) (or n132 n128)) n47)
(and (xor (xor n286 (and n269 n213)) (and n248 n213)) n281) --> (xor (and (xor n269 n248) (and n281 n213)) (and n281 n286))
(and n251 (not (xor (and (not norm5) n143) (and norm5 i_25)))) --> (xor (and (and (xor i_25 n143) n251) norm5) (and (not n143) n251))
(and (not (and (and norm4 i_6) i_7)) (not (and i_6 i_5))) --> (xor (or (or (not i_6) i_5) (and norm4 i_7)) i_6)
(and (xor (and (and i_6 i_8) i_7) i_4) (and i_7 i_6)) --> (and (and (xor i_8 i_4) i_6) i_7)
(and (and n121 (not (and (not n115) n34))) (and norm6 i_3)) --> (and (and (and i_3 n121) norm6) (or (not n34) n115))
(and (not (xor n245 (not (and (and n240 n230) n226)))) n236) --> (xor (and (and (and n230 n236) n240) n226) (and n236 n245))
(and (not (and (not (and (not desty10) (not desty9))) desty11)) (not desty12)) --> (xor (or (not (or desty9 desty10)) (or (not desty11) desty12)) desty12)
(and (not (and n150 (not (and (not (and n140 n130)) n36)))) n21) --> (and (or (xor (and (and n36 n130) n140) n36) (not n150)) n21)
(and (not (and (and (not pi100) (not pi095)) (not pi097))) (not pi110)) --> (xor (or (or pi110 pi095) (or pi100 pi097)) pi110)
(and (and (not (and (not pi116) pi029)) pi058) (not (and pi116 pi097))) --> (and (xor (not (and (xor pi097 pi029) pi116)) pi029) pi058)
(and (not (and (not (and (and n254 ocoeffs0) norm6)) (not n245))) n44) --> (or (and (and (and n44 ocoeffs0) n254) norm6) (and n44 n245))
(not (and (not (and (not n995) (not (and (not n991) ingones0)))) n24)) --> (and (or (not (and n24 ingones0)) n991) (not (and n24 n995)))
(not (and (not (and shift0 (not a109))) (not (and (not shift0) norm8)))) --> (xor (or (xor norm8 a109) shift0) a109)
(and (not (and (not shift0) (not a108))) (not (and shift0 (not a107)))) --> (xor (and (xor a107 a108) shift0) a108)
(and n80 (and (not (xor (xor (xor n48 n45) i_2) i_10)) n53)) --> (and (xor (xor (xor (not i_2) i_10) n45) n48) (and n53 n80))
(and (not (xor (xor n199 (and n188 n152)) (and n175 n152))) n138) --> (xor (and (xor n188 n175) (and n138 n152)) (and (not n199) n138))
(and (and (not (and (not i_9) i_3)) i_7) (not (and i_9 norm7))) --> (and (xor norm7 i_9) i_7)
(and (not (and (not (and i_9 i_7)) i_8)) (not (and i_7 i_4))) --> (xor (not (and (and (xor i_4 i_8) i_7) (or i_4 i_9))) i_8)
(and (not (and (not n60) (not (and (not (and norm8 n48)) B3)))) n46) --> (and (or (xor (and (and B3 n48) norm8) B3) n60) n46)
(and (not (and (and B3 (not B2)) (not B6))) (not (and B5 norm8))) --> (xor (or (xor (or B2 B6) B5) norm8) B5)
(and (not (and norm3 (and B4 B3))) (not (and (not B6) (not B4)))) --> (xor (and norm3 (and B4 B3)) (or B4 B6))
(and (not (and (and pi116 pi026) (not pi058))) (not (and pi058 (not pi026)))) --> (xor (not (and (or pi058 pi116) pi026)) pi058)
(not (and (not (and (not n346) (not (and (not n342) (not n334))))) n305)) --> (xor (or (not (or n342 n334)) (or (not n305) n346)) n305)
(not (and (not n808) (not (and (not (and (not n801) (not norm9))) ocoeffs0)))) --> (and (or norm9 (or n801 n808)) (or ocoeffs0 n808))
(and (and (not (and ingones1 ocoeffs2)) ocoeffs0) (not (and (not ingones1) (not ocoeffs2)))) --> (and (xor ocoeffs2 ingones1) ocoeffs0)
(not (and (not (and (not shift0) (not a16))) (not (and shift0 (not a15))))) --> (xor (not (and (xor a15 a16) shift0)) a16)
(and norm1 (xor (and (not n369) (and n365 n325)) (not (and n365 n325)))) --> norm1
(and (and (and n52 (not n47)) (not (and (and n30 n26) n23))) n22) --> (and (not (or (and (and n23 n26) n30) n47)) (and n22 n52))
(and (not (and (not n741) (not (and (and (and n461 n457) n734) pi002)))) pi082) --> (and (or (and (and (and pi002 n461) n457) n734) n741) pi082)
(and (not (and n883 (not (and n880 (not n863))))) (not (and (not n855) n820))) --> (and (xor (or (not (and n883 n880)) n863) n883) (or (not n820) n855))
(not (and (not (and n1041 (not (and (not (and n980 (not n950))) n25)))) n29)) --> (or (and (xor (or (not (and n25 n980)) n950) n25) n1041) (not n29))
(and (not (and (not (and ingones1 (not ocoeffs1))) ctable1)) (not (and (not ingones1) ocoeffs1))) --> (or (and (xor ocoeffs1 ctable1) ingones1) (not (or ocoeffs1 ctable1)))
(not (and (not (and (and (not n3919) (not n3917)) (and (not n3914) n3913))) n669)) --> (xor (or (or (not (and n669 n3913)) n3917) (or n3919 n3914)) n669)
(not (and (not (and (and n5538 (not n5535)) (and (not n5532) (not n5530)))) shift6)) --> (xor (or (or (not (and shift6 n5538)) n5535) (or n5532 n5530)) shift6)
(and (and (not (and i_8 (not i_7))) (not i_9)) (not (and (not i_8) i_7))) --> (not (or (xor i_7 i_8) i_9))
(not (and (not (and norm4 (not B6))) (not (and (and (not B9) B6) (not B4))))) --> (xor (or norm4 B6) (and (or B4 B9) B6))
(not (and (not n355) (not (and (not (and (not (and n343 (not n340))) B4)) n335)))) --> (or (and (xor (or (not (and B4 n343)) n340) B4) n335) n355)
(and (not (and (and (not opext0) opcode4) opext1)) (and (not (and (not opext1) opcode4)) opcode3)) --> (xor (and (not (and opext1 opext0)) (and opcode3 opcode4)) opcode3)
(and (not (and (and ctable0 (not ocoeffs0)) (not ingones1))) (not (and (xor ocoeffs2 ingones1) ocoeffs0))) --> (or (xor (and (not ocoeffs2) ocoeffs0) ingones1) (not (or ocoeffs0 ctable0)))
(not (and (not (and (not (and n595 (not n581))) (not (and (not n515) n22)))) n29)) --> (and (or (not (and n29 n595)) n581) (or (not (and n29 n22)) n515))
(and (and (not (and (not ingones1) (not ingones0))) ctable0) (not (and (and ingones0 ocoeffs0) ingones1))) --> (xor (and (or (not ingones0) ocoeffs0) (and ingones1 ctable0)) (and ingones0 ctable0))
(and (not (and (and shift0 a14) (not shift1))) (not (and (and (not shift0) a13) shift1))) --> (or (xor (not (and shift1 a13)) (and shift0 a14)) (and shift1 shift0))
(and (not (and (and (not shift0) a40) (not shift1))) (not (and (and shift0 a37) shift1))) --> (or (xor (not (and (xor a37 a40) shift0)) a40) (xor shift1 shift0))
(and (and (not (and (not i_6) i_4)) i_5) (not (and (and norm8 i_6) (not i_4)))) --> (xor (and (and (xor i_4 i_6) i_5) (or norm8 i_4)) i_5)
(and (not (and (not (and i_9 i_5)) (and i_8 i_7))) (not (and (not i_7) i_5))) --> (xor (or (not (and i_7 i_8)) (and i_5 i_9)) (and (not i_7) i_5))
(and (not (not (or (xor i_7 i_8) i_9))) (not (and (not (and i_8 i_7)) i_5))) --> (and (xor (or (xor i_8 i_7) (xor i_5 i_9)) i_5) (or (not i_5) i_7))
(and (not (and (and ingones0 ctable1) ingones1)) (not (and (and (not ingones1) (not ctable0)) (not ingones0)))) --> (or (xor (or (xor ctable0 ctable1) ingones1) ctable1) (xor ingones0 ingones1))
(and (not (and (not (and shift0 a120)) shift1)) (not (and (not (and (not shift0) a123)) norm10))) --> (and (xor (and (xor a123 a120) shift0) a123) (xor norm10 shift0))
(and norm1 (xor (and (xor (and n384 n369) n387) (and n384 n369)) (not (and n384 n369)))) --> norm1
(and (not (and n149 (not (and (not norm6) n126)))) (not (and n142 (and (not norm6) n126)))) --> (xor (or (not (and (xor n149 n142) n126)) norm6) n149)
(xor (and (not (xor (xor (and i_16 i_8) i_7) i_15)) (and norm7 norm15)) (and norm7 norm15)) --> (and (and norm7 (xor i_15 i_7)) norm15)
(and (and (not (and pi021 pi008)) (not pi013)) (not (and (not (and (not pi021) (not pi008))) pi007))) --> (not (or (xor (and (xor pi007 pi008) (xor pi021 pi008)) pi008) pi013))
(and (and (not (and (not (and (not pi110) (not pi096))) pi097)) (and (not pi100) (not pi095))) pi097) --> (and (not (or (or pi110 pi096) (or pi100 pi095))) pi097)
(and (and norm2 (not (xor (and (not n215) (not n167)) (not (and (not n216) (not n119)))))) n225) --> (and (xor (or n167 n215) (or n216 n119)) (and norm2 n225))
(not (and (and n135 (not (and (and n63 n130) norm6))) (not (and n127 (not (and norm6 n63)))))) --> (or (xor (and (and (xor n130 n127) n63) norm6) n127) (not n135))
(and (not (xor (or (not norm5) (or (not i_7) i_4)) i_4)) (not (and (and i_7 i_4) norm5))) --> (xor (and norm5 i_7) i_4)
(and (and n450 (not (xor norm4 (not norm10)))) (xor (and (not (xor norm4 (not norm10))) norm10) (not norm10))) --> (and (xor norm10 norm4) n450)
(and (and n135 (not (and (and n63 n130) (not n77)))) (not (and n127 (not (and (not n77) n63))))) --> (and (xor (or (not (and (xor n130 n127) n63)) n77) n127) n135)
(and (not (and (not (and i_7 i_6)) i_9)) (not (and (and (not i_9) i_7) (not (and i_6 i_5))))) --> (xor (not (and (or i_5 i_9) (and i_6 i_7))) (or i_9 i_7))
(and (xor (and (or (not i_7) i_6) (and (not i_9) i_8)) i_8) (not (and (and i_9 i_7) norm10))) --> (and (xor (and norm10 i_7) i_9) i_8)
(and (not (and (and (not ctable1) ctable0) (and ingones1 ingones0))) (not (and (and (not ingones1) (not ctable0)) (not ingones0)))) --> (or (or (xor ingones0 ctable0) (xor ingones1 ctable0)) (and ctable0 ctable1))
(and (and (xor (xor n313 n273) norm4) (xor (and (xor n313 n273) norm4) (and (not n313) (not n273)))) n322) --> (and (and norm4 n322) (not (or n313 n273)))
(and (and (and n387 (xor norm4 (not norm10))) (xor (and (not (xor norm4 (not norm10))) norm10) (not norm10))) i_26) --> (and (not (or norm4 norm10)) (and i_26 n387))
(and (and (xor n216 (not n119)) (not (xor (and (not n215) (not n167)) (not (and norm11 (not n119)))))) n225) --> (and (and (xor norm11 n119) n225) (xor (or n167 n215) n119))
(and (not (and (not (and i_8 i_7)) i_5)) (xor (or (or (not i_6) i_5) (and (not i_8) i_7)) i_6)) --> (xor (not (or (and (xor i_6 i_8) i_7) (xor i_5 i_8))) i_8)
(and (not (xor (or (not (and opcode3 opcode4)) (or opcode1 opcode0)) opcode1)) (not (and (not (and opcode4 (not opcode3))) opcode1))) --> (and (and (xor opcode1 opcode3) opcode4) (or (not opcode0) opcode1))
(and (and (xor (not n217) (xor n168 n120)) (xor (and (not n217) (xor n168 n120)) (and (not n168) norm11))) n226) --> (and (not (or n217 n168)) (and norm11 n226))
(and (and (xor (xor n313 n273) norm4) (not (xor (and (xor n313 n273) norm4) (and (not n313) (not n273))))) n322) --> (and (and (xor (xor norm4 n313) n273) n322) (or n313 n273))
(and (and (and n373 (not (xor norm5 (not norm12)))) (xor (and (not (xor norm5 (not norm12))) norm12) (not norm12))) i_24) --> (and (and (xor norm5 norm12) i_24) n373)
(and (not (and (and (and (not pi052) (not pi039)) (not pi051)) (not pi027))) (not (xor (or (or pi026 pi051) (or pi052 pi039)) pi026))) --> (xor (and (or (or pi051 pi052) pi039) (xor pi026 pi027)) pi027)
(and (and (not (and (not (and i_7 i_6)) (not i_3))) i_4) (not (and (and (xor (not i_2) i_6) i_3) (or (not i_6) i_7)))) --> (and (or (and (xor i_7 i_3) i_6) (and (xor i_6 i_2) i_3)) i_4)
(xor (and n305 (xor (and (xor n264 n257) (not n254)) (not n254))) (and n305 (not (xor (and (xor n264 n257) (not n254)) (not n254))))) --> n305
(and (xor (and (xor (xor n312 n288) (xor n167 n143)) norm6) (and (xor n312 n288) (xor n167 n143))) (and (xor (xor n312 n288) (xor n167 n143)) norm6)) --> (and (xor (xor (xor n288 n143) n312) n167) norm6)
(xor (and (xor (and (xor n313 n273) (xor n216 n192)) (and (not n313) (not n273))) (and (xor n313 n273) (xor n216 n192))) (not (and (xor n313 n273) (xor n216 n192)))) --> true
(and (not (xor (not (and (and (xor i_4 i_8) i_7) (or i_4 i_9))) i_8)) (not (and (and (not (and i_9 i_7)) i_8) (not (and (not (and (not i_9) (not i_7))) (not i_4)))))) --> (and (xor (and (xor i_9 i_7) i_8) i_4) (or (not i_4) i_7))
(and (and (xor norm3 (xor norm8 norm13)) (xor (and norm3 (xor norm8 norm13)) norm21)) (xor (and (xor (and norm3 (xor norm8 norm13)) norm21) (and norm3 (xor norm8 norm13))) (not (and norm3 (xor norm8 norm13))))) --> (and norm21 norm3)
(and (and (xor n364 (not n324)) (xor norm5 (not (and (not n364) (not n324))))) (xor (and (not (xor norm5 (not (and (not n364) (not n324))))) (and (not n364) (not n324))) (not (and (not n364) (not n324))))) --> (and (not norm5) (and n324 n364))
(and (and (xor (xor norm4 norm9) norm14) (xor (and (xor norm4 norm9) norm14) (and norm4 norm9))) (xor (and (xor (and (xor norm4 norm9) norm14) (and norm4 norm9)) (and (xor norm4 norm9) norm14)) (not (and (xor norm4 norm9) norm14)))) --> (and (and norm14 norm4) norm9)


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 318
selected cripath : 
n189 n190 n192 n193 n196 n197 n198 n200 n201 n202 n204 n205 n209 n210 n211 n213 n214 n215 n254 n273 n367 n389 n404 n412 n413 n428 n429 m_0 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#2  -->  CVar_n193
tmpvar#1  -->  CVar_n193
tmpvar#0  -->  CVar_n195
tmpvar#3  -->  CVar_n199
---------------------

old bexp : (and (not (xor n215 (and n177 i_23))) n261)
new bexp : (xor (and (and i_23 n261) n177) (and (not n215) n261))
tgt bexp     : (and (not (xor n193 (and n193 n195))) n199)
sub old bexp : (and (not (xor n193 (and n193 n195))) n199)
sub new bexp : (xor (and (and n195 n199) n193) (and (not n193) n199))
before depth : 3
after depth : 2
graph replaced


unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n188
tmpvar#1  -->  CVar_n201
tmpvar#2  -->  CVar_n202
tmpvar#3  -->  CVar_n203
---------------------

old bexp : (and n261 (not (xor n215 (and n177 i_23))))
new bexp : (xor (and (and i_23 n261) n177) (and (not n215) n261))
tgt bexp     : (and n188 (not (xor n201 (and n202 n203))))
sub old bexp : (and n188 (not (xor n201 (and n202 n203))))
sub new bexp : (xor (and (and n203 n188) n202) (and (not n201) n188))
before depth : 4
after depth : 3
graph replaced


unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n215
tmpvar#1  -->  CVar_n218
tmpvar#2  -->  CVar_n252
---------------------

old bexp : (and desty15 (and desty14 norm2))
new bexp : (and norm2 (and desty15 desty14))
tgt bexp     : (and n215 (and n218 n252))
sub old bexp : (and n215 (and n218 n252))
sub new bexp : (and n252 (and n215 n218))
before depth : 7
after depth : 6
graph replaced


graph size : 324
graph mult size : 113
graph xor size : 211
optimal graph replaced, cost : 82377
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 324
selected cripath : 
m_0 n429 n411 n410 n405 n404 n403 n402 n401 n395 n370 n356 n355 n354 n353 n352 n351 n350 n346 n345 n342 n341 n340 n313 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_n336
tmpvar#0  -->  CVar_n347
tmpvar#2  -->  CVar_n150
tmpvar#3  -->  CVar_n351
---------------------

old bexp : (and (not (and n824 n876)) (and n893 norm2))
new bexp : (and (xor (and (and n824 n893) n876) n893) norm2)
tgt bexp     : (and (not (and n336 n347)) (and n150 n351))
sub old bexp : (and (not (and n336 n347)) (and n150 n351))
sub new bexp : (and (xor (and (and n336 n150) n347) n150) n351)
before depth : 6
after depth : 5
graph replaced


unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n150
tmpvar#1  -->  CVar_n333
tmpvar#2  -->  CVar_n346
---------------------

old bexp : (and desty14 (not (and n223 n231)))
new bexp : (xor (and (and desty14 n223) n231) desty14)
tgt bexp     : (and n150 (not (and n333 n346)))
sub old bexp : (and n150 (not (and n333 n346)))
sub new bexp : (xor (and (and n150 n333) n346) n150)
before depth : 5
after depth : 4
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 324
selected cripath : 
m_0 n429 n428 n413 n387 n366 n360 n273 n254 tmp47 n215 n214 n213 n211 n205 n204 n202 n201 n200 tmp8 tmp9 n193 n192 n191 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 324
selected cripath : 
n226 n228 n229 n232 n236 n237 n238 n248 n252 n254 n273 n367 n389 n404 n412 n413 n428 n429 m_0 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_n224
tmpvar#2  -->  CVar_n228
tmpvar#0  -->  CVar_n231
tmpvar#3  -->  CVar_n235
---------------------

old bexp : (and (xor (and i_13 n107) n118) n117)
new bexp : (xor (and (and n117 i_13) n107) (and n117 n118))
tgt bexp     : (and (xor (and n224 n228) n231) n235)
sub old bexp : (and (xor (and n224 n228) n231) n235)
sub new bexp : (xor (and (and n235 n224) n228) (and n235 n231))
before depth : 3
after depth : 2
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 325
selected cripath : 
m_0 n429 n411 n410 n405 n404 n389 n367 n273 n254 tmp47 n215 n214 n213 n211 n210 tmp42 tmp43 n201 n197 n196 n193 n192 n190 n189 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 325
selected cripath : 
n189 n190 n192 n193 tmp9 tmp8 n200 n201 n202 tmp40 n210 n211 n213 n214 n215 tmp47 n254 n273 n360 n361 n364 n385 n411 n429 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 325
selected cripath : 
n189 n190 n192 n193 n196 n197 n201 n202 n204 n205 n206 n207 n215 tmp47 n254 n273 n360 n361 n364 n385 n406 n407 n408 n409 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 325
selected cripath : 
n189 n190 n192 n193 tmp9 tmp8 n200 n201 n202 n204 n205 n206 n207 n215 tmp47 n254 n273 n367 n389 n404 n405 n410 n411 n429 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 325
selected cripath : 
n191 n192 n193 n196 n197 n201 n202 n204 n205 n206 n207 n215 tmp47 n254 n273 n360 n366 n387 n413 n428 n429 m_0 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n186
tmpvar#2  -->  CVar_n252
tmpvar#3  -->  CVar_tmp47
tmpvar#1  -->  CVar_n272
tmpvar#4  -->  CVar_n359
---------------------

old bexp : (and n193 (xor (xor (and n213 n269) n286) n249))
new bexp : (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
tgt bexp     : (and n186 (xor (xor (and n252 tmp47) n272) n359))
sub old bexp : (and n186 (xor (xor (and n252 tmp47) n272) n359))
sub new bexp : (xor (and (xor n272 n359) n186) (and (and n186 n252) tmp47))
before depth : 7
after depth : 6
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
n189 n190 n192 n193 n196 n197 n201 n202 tmp40 n210 n211 n213 n214 n215 tmp47 n254 n273 n360 n361 n362 n363 n383 n408 n409 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
m_0 n409 n408 n407 n406 n405 n387 n386 n380 n367 n273 n254 tmp47 n215 n207 n206 n205 n204 n202 n201 n200 tmp8 tmp9 n193 n192 n190 n189 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
n191 n192 n193 tmp6 n200 n201 n202 n204 n205 n206 n207 n215 tmp47 n254 n273 n367 n380 n386 n387 n405 n406 n407 n408 n409 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
n199 tmp7 tmp6 n200 n201 n202 n204 n205 n211 n213 n214 n215 tmp47 n254 n273 n367 n389 n404 n405 n406 n407 n408 n409 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
m_0 n409 n408 n407 n406 n385 n364 n361 n360 n273 n254 tmp47 n215 n214 n213 n211 n205 n204 n202 n201 n197 n196 n193 n192 n190 n189 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
m_0 n409 n408 n383 n363 n362 n361 n360 n273 n254 tmp47 n215 n214 n213 n211 n210 tmp40 n202 n201 n200 tmp6 n193 n192 n191 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
m_0 n409 n408 n383 n363 n362 n361 n360 n273 n254 tmp47 n215 n214 n213 n211 n205 n204 n202 n201 n197 n196 n193 n192 n191 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
n189 n190 n192 n193 tmp9 tmp8 n200 n201 n202 tmp40 n210 n211 n213 n214 n215 tmp47 n254 n273 n360 n361 n364 n385 n411 n429 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
m_0 n429 n428 n413 n412 n404 n389 n367 n273 n254 tmp47 n215 n207 n206 n205 n204 n202 n201 n197 n196 n193 n192 n190 n189 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
n191 n192 n193 n196 n197 n201 n202 n204 n205 n206 n207 n215 tmp47 n254 n273 n367 n389 n415 n427 n428 n429 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
n191 n192 n193 tmp9 tmp8 n200 n201 n202 n204 n205 n206 n207 n215 tmp47 n254 n273 n367 n380 n381 n384 n385 n411 n429 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
n189 n190 n192 n193 tmp9 tmp8 n200 n201 n202 n204 n205 n206 n207 n215 tmp47 n254 n273 n367 n380 n386 n387 n405 n410 n411 n429 m_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 329
selected cripath : 
n191 n192 n193 tmp6 n200 n201 n202 tmp40 n210 n211 n213 n214 n215 tmp47 n254 n273 n367 n380 n381 n384 n385 n406 n407 n408 n409 m_0 

dangling node deleted : nodeVal : AND index : 215
dangling node deleted : nodeVal : AND index : 239
dangling node deleted : nodeVal : AND index : 343
dangling node deleted : nodeVal : n198 index : 1
dangling node deleted : nodeVal : n209 index : 1
dangling node deleted : nodeVal : n253 index : 1
dangling node deleted : nodeVal : AND index : 341
dangling node deleted : nodeVal : NOT index : 209
dangling node deleted : nodeVal : NOT index : 237
cleanup fin
redundant node deleted : nodeVal : n220 index : 1 is same with nodeVal : tmp9 index : 1
redundant node deleted : nodeVal : n202 index : 1 is same with nodeVal : tmp43 index : 1
sharing detect fin
dangling node deleted : nodeVal : NOT index : 219
dangling node deleted : nodeVal : NOT index : 265
cleanup fin
graph opt finished
INORDER = i_99 i_98 i_97 i_96 i_95 i_94 i_93 i_92 i_91 i_90 i_9 i_89 i_88 i_87 i_86 i_85 i_84 i_83 i_82 i_81 i_80 i_8 i_79 i_78 i_77 i_76 i_75 i_74 i_73 i_72 i_71 i_70 i_7 i_69 i_68 i_67 i_66 i_65 i_64 i_63 i_62 i_61 i_6 i_57 i_56 i_55 i_54 i_53 i_52 i_51 i_50 i_5 i_49 i_48 i_47 i_46 i_45 i_44 i_43 i_42 i_41 i_40 i_39 i_38 i_37 i_36 i_35 i_34 i_33 i_32 i_31 i_30 i_29 i_28 i_27 i_26 i_25 i_24 i_23 i_22 i_21 i_20 i_19 i_18 i_17 i_16 i_15 i_14 i_13 i_12 i_113 i_112 i_111 i_110 i_11 i_109 i_108 i_107 i_106 i_105 i_104 i_103 i_102 i_101 i_100 i_10;
OUTORDER = m_3 m_2 m_1 m_0;
n117 = (!i_113 * i_57) + (i_113 * !i_57);
n118 = (!i_112 * i_56) + (i_112 * !i_56);
n120 = (!i_111 * i_55) + (i_111 * !i_55);
n122 = (!i_110 * i_54) + (i_110 * !i_54);
n130 = (!i_107 * i_51) + (i_107 * !i_51);
n132 = (!i_50);
n133 = (!i_106 * n132) + (i_106 * !n132);
n135 = (!i_109 * i_53) + (i_109 * !i_53);
n137 = (!i_108 * i_52) + (i_108 * !i_52);
n150 = (!i_65 * i_9) + (i_65 * !i_9);
n158 = (!i_43 * i_99) + (i_43 * !i_99);
n160 = (!i_42 * i_98) + (i_42 * !i_98);
n163 = (!i_101 * i_45) + (i_101 * !i_45);
n164 = (!i_100 * i_44) + (i_100 * !i_44);
n168 = (!i_103 * i_47) + (i_103 * !i_47);
n169 = (!i_102 * i_46) + (i_102 * !i_46);
n171 = (!i_105 * i_49) + (i_105 * !i_49);
n173 = (!i_104 * i_48) + (i_104 * !i_48);
n187 = (!i_27 * i_83) + (i_27 * !i_83);
n188 = (!i_35 * i_91) + (i_35 * !i_91);
n189 = (!i_40 * i_96) + (i_40 * !i_96);
n191 = (!i_39 * i_95) + (i_39 * !i_95);
n194 = (!i_38 * i_94) + (i_38 * !i_94);
n199 = (!i_37 * i_93) + (i_37 * !i_93);
n203 = (!i_36 * i_92) + (i_36 * !i_92);
n208 = (!i_26 * i_82) + (i_26 * !i_82);
n212 = (!i_34 * i_90) + (i_34 * !i_90);
n216 = (!i_28 * i_84) + (i_28 * !i_84);
n219 = (!i_30 * i_86) + (i_30 * !i_86);
n223 = (!i_32 * i_88) + (i_32 * !i_88);
n225 = (!i_33);
n226 = (!i_89 * n225) + (i_89 * !n225);
n227 = (!i_41 * i_97) + (i_41 * !i_97);
n233 = (!i_31 * i_87) + (i_31 * !i_87);
n249 = (!i_29 * i_85) + (i_29 * !i_85);
n274 = (!i_19 * i_75) + (i_19 * !i_75);
n276 = (!i_18 * i_74) + (i_18 * !i_74);
n279 = (!i_21 * i_77) + (i_21 * !i_77);
n281 = (!i_20 * i_76) + (i_20 * !i_76);
n284 = (!i_23 * i_79) + (i_23 * !i_79);
n286 = (!i_22 * i_78) + (i_22 * !i_78);
n288 = (!i_25 * i_81) + (i_25 * !i_81);
n290 = (!i_24 * i_80) + (i_24 * !i_80);
n309 = (!i_5 * i_61) + (i_5 * !i_61);
n310 = (!i_6 * i_62) + (i_6 * !i_62);
n311 = (!i_63 * i_7) + (i_63 * !i_7);
n312 = (!i_64 * i_8) + (i_64 * !i_8);
n313 = (!i_16 * i_72) + (i_16 * !i_72);
n315 = (!i_17 * i_73) + (i_17 * !i_73);
n318 = (!i_13 * i_69) + (i_13 * !i_69);
n319 = (!i_12 * i_68) + (i_12 * !i_68);
n321 = (!i_11 * i_67) + (i_11 * !i_67);
n323 = (!i_10 * i_66) + (i_10 * !i_66);
n327 = (!i_15 * i_71) + (i_15 * !i_71);
n328 = (!i_14 * i_70) + (i_14 * !i_70);
n119 = (n117 * n118);
n121 = (!n120);
n123 = (!n122);
n127 = (n120 * n123);
n131 = (!n130);
n134 = (n131 * n133);
n136 = (!n135);
n138 = (!n137);
n143 = (n135 * n138);
n144 = (!n137 * n143) + (n137 * !n143);
n146 = (n130 * n133);
n147 = (!n133 * n146) + (n133 * !n146);
n151 = (!n150);
n159 = (!n158);
n161 = (!n160);
n165 = (!n164);
n166 = (n163 * n165);
n170 = (n168 * n169);
n172 = (!n171);
n174 = (n172 * n173);
n178 = (n171 * n173);
n182 = (n158 * n161);
n183 = (!n160 * n182) + (n160 * !n182);
n190 = (!n189);
n192 = (n190 * n191);
n193 = (!n189 * n192) + (n189 * !n192);
n195 = (!n194);
n224 = (!n189 * n223) + (n189 * !n223);
n228 = (n226 * n227);
n230 = (!n223);
n234 = (!n189 * n191) + (n189 * !n191);
n235 = (!n233 * n234) + (n233 * !n234);
n239 = (!n233);
n244 = (!n219);
n255 = (!n249);
n259 = (!n216);
n264 = (!n187);
n268 = (!n208);
n275 = (!n274);
n277 = (!n276);
n280 = (!n279);
n282 = (n280 * n281);
n285 = (!n284);
n287 = (n285 * n286);
n289 = (!n288);
n291 = (!n290);
n296 = (n288 * n291);
n297 = (!n290 * n296) + (n290 * !n296);
n299 = (n284 * n286);
n302 = (n279 * n281);
n304 = (n274 * n277);
n305 = (!n276 * n304) + (n276 * !n304);
n314 = (!n313);
n316 = (n314 * n315);
n317 = (!n313 * n316) + (n313 * !n316);
n320 = (n318 * n319);
n322 = (!n321);
n324 = (!n323);
n329 = (n327 * n328);
n332 = (n321 * n324);
n333 = (!n323 * n332) + (n323 * !n332);
n337 = (!n327);
n338 = (!n328);
n340 = (n313 * n315);
n343 = (n327 * n338);
tmp41 = (n188 * n203);
tmp7 = (n195 * n199);
n124 = (n121 * n123);
n125 = (n119 * n124);
n128 = (!n123 * n127) + (n123 * !n127);
n139 = (n136 * n138);
n140 = (n134 * n139);
n145 = (n134 * n144);
n148 = (!n145 * n147) + (n145 * !n147);
n162 = (n159 * n161);
n167 = (n162 * n166);
n175 = (n170 * n174);
n179 = (n170 * n178);
n196 = (n193 * n195);
n197 = (!n193 * n196) + (n193 * !n196);
n229 = (n224 * n228);
n231 = (n190 * n230);
n240 = (!n234);
n241 = (n239 * n240);
n278 = (n275 * n277);
n283 = (n278 * n282);
n292 = (n289 * n291);
n293 = (n287 * n292);
n298 = (n287 * n297);
n300 = (!n298 * n299) + (n298 * !n299);
n303 = (n278 * n302);
n306 = (!n303 * n305) + (n303 * !n305);
n325 = (n322 * n324);
n326 = (n320 * n325);
n330 = (n326 * n329);
n331 = (n317 * n330);
n334 = (!n331 * n333) + (n331 * !n333);
n335 = (n151 * n334);
n336 = (!n333);
n339 = (n337 * n338);
n341 = (n339 * n340);
n344 = (!n338 * n343) + (n338 * !n343);
tmp6 = (n193 * tmp7);
tmp9 = (!n193);
n126 = (!n125);
n129 = (!n126 * n128) + (n126 * !n128);
n141 = (n129 * n140);
n153 = (!n148);
n154 = (!n128);
n155 = (n140 * n154);
n176 = (n167 * n175);
n180 = (n167 * n179);
n181 = (n162 * n164);
n184 = (!n181 * n183) + (n181 * !n183);
n221 = (!n194 * tmp9) + (n194 * !tmp9);
n232 = (!n229 * n231) + (n229 * !n231);
n236 = (n232 * n235);
n250 = (!n197 * n199) + (n197 * !n199);
n294 = (n283 * n293);
n301 = (n283 * n300);
n307 = (!n301 * n306) + (n301 * !n306);
n342 = (!n341);
n345 = (!n342 * n344) + (n342 * !n344);
n346 = (n326 * n345);
n350 = (n333 * n346);
tmp8 = (n199 * tmp9);
n142 = (!n141);
n149 = (!n142 * n148) + (n142 * !n148);
n156 = (!n153 * n155) + (n153 * !n155);
n177 = (!n176);
n185 = (!n180 * n184) + (n180 * !n184);
n200 = (!tmp6 * tmp8) + (tmp6 * !tmp8);
n201 = (!n197 * n200) + (n197 * !n200);
n222 = (!n219 * n221) + (n219 * !n221);
n237 = (n222 * n236);
n242 = (n222 * n241);
n245 = (!n221);
n251 = (!n249 * n250) + (n249 * !n250);
n256 = (!n250);
n295 = (!n294);
n308 = (!n295 * n307) + (n295 * !n307);
n347 = (!n346);
n348 = (n336 * n347);
n351 = (!n350);
n152 = (n149 * n151);
n157 = (n150 * n156);
n186 = (!n177 * n185) + (n177 * !n185);
n217 = (!n201 * n203) + (n201 * !n203);
n238 = (!n237);
n243 = (!n242);
n246 = (n244 * n245);
n257 = (n255 * n256);
n349 = (!n348);
n352 = (n150 * n351);
tmp43 = (!n201);
n204 = (n203 * tmp43);
n205 = (!n201 * n204) + (n201 * !n204);
n218 = (!n216 * n217) + (n216 * !n217);
n247 = (!n243 * n246) + (n243 * !n246);
n248 = (!n238 * n247) + (n238 * !n247);
n252 = (n248 * n251);
n258 = (n218 * n257);
n260 = (!n217);
n353 = (n349 * n352);
n354 = (!n335 * n353) + (n335 * !n353);
n372 = (n335 * n353);
tmp40 = (tmp41 * tmp43);
tmp42 = (n188 * tmp43);
n206 = (!n188 * n205) + (n188 * !n205);
n210 = (!tmp40 * tmp42) + (tmp40 * !tmp42);
n211 = (!n205 * n210) + (n205 * !n210);
n261 = (n259 * n260);
n262 = (!n258 * n261) + (n258 * !n261);
n355 = (!n312 * n354) + (n312 * !n354);
n373 = (!n372);
n374 = (n312 * n354);
n399 = (n372 * n374);
n207 = (!n187 * n206) + (n187 * !n206);
n213 = (!n211 * n212) + (n211 * !n212);
n265 = (!n206);
n356 = (!n311 * n355) + (n311 * !n355);
n371 = (n311 * n355);
n375 = (!n373 * n374) + (n373 * !n374);
n214 = (!n208 * n213) + (n208 * !n213);
n215 = (n207 * n214);
n263 = (n215 * n262);
n266 = (n264 * n265);
n269 = (!n213);
n357 = (!n310 * n356) + (n310 * !n356);
n370 = (n310 * n356);
n376 = (!n371 * n375) + (n371 * !n375);
n396 = (!n375);
n397 = (n371 * n396);
n423 = (n397 * n399);
tmp47 = (n215 * n218);
n254 = (n252 * tmp47);
n267 = (n214 * n266);
n270 = (n268 * n269);
n358 = (!n309 * n357) + (n309 * !n357);
n369 = (n309 * n357);
n377 = (!n370 * n376) + (n370 * !n376);
n394 = (!n376);
n395 = (n370 * n394);
n398 = (!n397);
n400 = (!n398 * n399) + (n398 * !n399);
n271 = (!n267 * n270) + (n267 * !n270);
n272 = (!n263 * n271) + (n263 * !n271);
n273 = (!n254 * n272) + (n254 * !n272);
n359 = (!n308 * n358) + (n308 * !n358);
n368 = (n308 * n358);
n378 = (!n369 * n377) + (n369 * !n377);
n392 = (!n377);
n393 = (n369 * n392);
n401 = (!n395 * n400) + (n395 * !n400);
n420 = (!n400);
n421 = (n395 * n420);
n360 = (!n273 * n359) + (n273 * !n359);
n367 = (n273 * n359);
n379 = (!n368 * n378) + (n368 * !n378);
n390 = (!n378);
n391 = (n368 * n390);
n402 = (!n393 * n401) + (n393 * !n401);
n418 = (!n401);
n419 = (n393 * n418);
n422 = (!n421);
n424 = (!n422 * n423) + (n422 * !n423);
n361 = (!n186 * n360) + (n186 * !n360);
n366 = (n186 * n360);
n380 = (!n367 * n379) + (n367 * !n379);
n388 = (!n379);
n389 = (n367 * n388);
n403 = (!n391 * n402) + (n391 * !n402);
n416 = (!n402);
n417 = (n391 * n416);
n425 = (!n419 * n424) + (n419 * !n424);
n362 = (!n157 * n361) + (n157 * !n361);
n364 = (n157 * n361);
n381 = (!n366 * n380) + (n366 * !n380);
n386 = (!n380);
n387 = (n366 * n386);
n404 = (!n389 * n403) + (n389 * !n403);
n414 = (!n403);
n415 = (n389 * n414);
n426 = (!n417 * n425) + (n417 * !n425);
m_3 = (!n152 * n362) + (n152 * !n362);
n363 = (n152 * n362);
n365 = (!n364);
n382 = (!n365 * n381) + (n365 * !n381);
n384 = (!n381);
n385 = (n364 * n384);
n405 = (!n387 * n404) + (n387 * !n404);
n412 = (!n404);
n413 = (n387 * n412);
n427 = (!n415 * n426) + (n415 * !n426);
m_2 = (!n363 * n382) + (n363 * !n382);
n383 = (n363 * n382);
n406 = (!n385 * n405) + (n385 * !n405);
n410 = (!n405);
n411 = (n385 * n410);
n428 = (!n413 * n427) + (n413 * !n427);
n407 = (!n406);
n408 = (n383 * n407);
n429 = (!n411 * n428) + (n411 * !n428);
n431 = (!n383);
m_1 = (!n406 * n431) + (n406 * !n431);
n409 = (!n408);
m_0 = (!n409 * n429) + (n409 * !n429);


new graph depth
---graph depth print---
var : m_0 depth : 9
var : m_1 depth : 8
var : m_2 depth : 7
var : m_3 depth : 6
---------------------
old mult depth : 10
new mult depth : 9
